word;quantity;frequency
tickies;1;0.001
bless;1;0.001
actually;1;0.001
domino;1;0.001
course;1;0.001
find;5;0.004
doo;1;0.001
pram;2;0.001
we;1;0.001
downstairs;1;0.001
all_gone;4;0.003
paddle;1;0.001
rosebud;1;0.001
baba;1;0.001
chocolate;1;0.001
do;4;0.003
Gerry;1;0.001
just;1;0.001
Jenny;6;0.004
Daddy;6;0.004
look;4;0.003
skin;1;0.001
Marmite;3;0.002
today;1;0.001
lorry;1;0.001
man;1;0.001
dress;2;0.001
leaf;1;0.001
cannot;7;0.005
Goldilocks;1;0.001
jug;1;0.001
dear;2;0.001
policeman;1;0.001
sit;6;0.004
red;2;0.001
everybody;2;0.001
little;1;0.001
map;1;0.001
football;1;0.001
clothe;3;0.002
close;4;0.003
turn;4;0.003
Ben;1;0.001
like;5;0.004
sucker;1;0.001
com;1;0.001
boy;2;0.001
jelly;2;0.001
lounge;1;0.001
stock;1;0.001
fry;1;0.001
beat;4;0.003
naughty;2;0.001
Cape;1;0.001
kitten;2;0.001
cake;2;0.001
hat;2;0.001
nest;1;0.001
holiday;1;0.001
toe;3;0.002
hello;1;0.001
lie;2;0.001
warm;2;0.001
comb;2;0.001
boil;1;0.001
six;1;0.001
Wednesday;1;0.001
lady;2;0.001
zoo;1;0.001
slipper;1;0.001
belt;1;0.001
draw;2;0.001
drive;1;0.001
tear;4;0.003
put;5;0.004
floor;1;0.001
wont;5;0.004
choose;1;0.001
rain;4;0.003
bring;2;0.001
pen;3;0.002
push;3;0.002
drop;3;0.002
storybook;1;0.001
cough;2;0.001
small;1;0.001
penny;2;0.001
break;2;0.001
throw;2;0.001
morrow;1;0.001
middle;1;0.001
keep;3;0.002
say;2;0.001
prune;2;0.001
medicine;1;0.001
tire;3;0.002
balloon;1;0.001
pussy;2;0.001
need;3;0.002
Mummy;4;0.003
post;2;0.001
from;1;0.001
chin;1;0.001
hear;2;0.001
pretty;2;0.001
birdie;3;0.002
touch;2;0.001
doggie;2;0.001
supper;2;0.001
string;1;0.001
bird;1;0.001
wireless;1;0.001
scruff;1;0.001
cross;2;0.001
with;1;0.001
sticker;1;0.001
will;1;0.001
high;1;0.001
first;2;0.001
pencil;1;0.001
bag;2;0.001
leave;3;0.002
hole;1;0.001
Wendy;1;0.001
how;1;0.001
Lucky;4;0.003
ready;2;0.001
lawn;1;0.001
Steven;1;0.001
up;3;0.002
Lockett;1;0.001
home;1;0.001
show;3;0.002
read;3;0.002
bunny;3;0.002
Kipper;1;0.001
pottie;1;0.001
mouth;1;0.001
sandwich;2;0.001
cotton;1;0.001
forward;2;0.001
Susie;1;0.001
lap;2;0.001
scarf;1;0.001
open;5;0.004
comfortable;2;0.001
think;2;0.001
both;1;0.001
cook;2;0.001
dive;1;0.001
spider;1;0.001
quack;2;0.001
across;1;0.001
snake;2;0.001
pick;1;0.001
girl;3;0.002
dad;4;0.003
now;1;0.001
outside;2;0.001
bright;1;0.001
wash;2;0.001
all;2;0.001
bite;3;0.002
bib;1;0.001
Stockport;1;0.001
swim;1;0.001
Town;2;0.001
sick;2;0.001
walk;2;0.001
and;1;0.001
car;1;0.001
door;1;0.001
stair;1;0.001
flat;1;0.001
this;1;0.001
good;1;0.001
Lisa;1;0.001
sweetie;2;0.001
can;1;0.001
pot;1;0.001
pinkie;1;0.001
hold;3;0.002
pop;1;0.001
blow;4;0.003
lavatory;1;0.001
vest;1;0.001
upstairs;4;0.003
christmas;2;0.001
pajama;1;0.001
further;1;0.001
crispies;1;0.001
spill;1;0.001
spade;1;0.001
kind;1;0.001
love;2;0.001
corner;1;0.001
purse;2;0.001
when;1;0.001
sandal;2;0.001
press;2;0.001
sleep;4;0.003
orange;2;0.001
biscui;1;0.001
play;4;0.003
guinea;1;0.001
bone;1;0.001
side;1;0.001
till;1;0.001
around;1;0.001
starling;2;0.001
would;1;0.001
brand;1;0.001
get;5;0.004
reindeer;1;0.001
ow;1;0.001
fee;2;0.001
letter;1;0.001
doggy;3;0.002
mantlepiece;1;0.001
fall;8;0.006
please;2;0.001
moo;2;0.001
ear;1;0.001
see;3;0.002
cover;4;0.003
drink;3;0.002
grass;1;0.001
after;1;0.001
sparrow;1;0.001
beer;1;0.001
hair;2;0.001
over;2;0.001
lunch;1;0.001
an;1;0.001
mummie;5;0.004
goat;1;0.001
fly;5;0.004
yellow;2;0.001
tummy;2;0.001
already;1;0.001
better;3;0.002
two;1;0.001
David;1;0.001
hard;1;0.001
past;1;0.001
Jaffa;1;0.001
pouffe;1;0.001
bit;1;0.001
Chandley;1;0.001
move;1;0.001
work;2;0.001
Susan;1;0.001
tomorrow;1;0.001
oh;2;0.001
bicycle;1;0.001
pocket;1;0.001
nearly;1;0.001
fishie;1;0.001
lose;4;0.003
pig;2;0.001
one;2;0.001
noise;1;0.001
elastic;1;0.001
hope;1;0.001
cold;3;0.002
burn;4;0.003
silly;2;0.001
quiet;1;0.001
tonight;1;0.001
coffee;1;0.001
own;1;0.001
apple;1;0.001
baby;1;0.001
seat;1;0.001
dirty;4;0.003
butter;2;0.001
s;1;0.001
bridge;1;0.001
four;1;0.001
rabbit;1;0.001
mountain;1;0.001
ambulance;1;0.001
he;1;0.001
curler;1;0.001
tuck;2;0.001
eat;5;0.004
fish;2;0.001
crocodile;1;0.001
umbrella;1;0.001
neck;1;0.001
gooseberry;2;0.001
da// Boost.Bimap
//
// Copyright (c) 2006-2007 Matias Capeletto
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

/// \file views/vector_set_view.hpp
/// \brief View of a side of a bimap that is signature compatible with std::vector.

#ifndef BOOST_BIMAP_VIEWS_VECTOR_SET_VIEW_HPP
#define BOOST_BIMAP_VIEWS_VECTOR_SET_VIEW_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/config.hpp>

#include <boost/bimap/container_adaptor/vector_adaptor.hpp>
#include <boost/bimap/container_adaptor/detail/comparison_adaptor.hpp>
#include <boost/bimap/detail/set_view_base.hpp>
#include <boost/bimap/detail/map_view_base.hpp>

namespace boost {
namespace bimaps {
namespace views {

/// \brief View of a bimap that is signature compatible with std::vector.
/**

This class uses container_adaptor and iterator_adaptor to wrapped a index of the
multi_index bimap core so it can be used as a std::vector.

See also const_set_view.
                                                                                    **/

template< class CoreIndex >
class vector_set_view
:
    public BOOST_BIMAP_SEQUENCED_SET_VIEW_CONTAINER_ADAPTOR(
        vector_adaptor,
        CoreIndex,
        reverse_iterator, const_reverse_iterator
    ),

    public ::boost::bimaps::detail::
                set_view_base< vector_set_view< CoreIndex >, CoreIndex >
{
    BOOST_BIMAP_SET_VIEW_BASE_FRIEND(vector_set_view,CoreIndex)

    typedef BOOST_BIMAP_SEQUENCED_SET_VIEW_CONTAINER_ADAPTOR(
        vector_adaptor,
        CoreIndex,
        reverse_iterator, const_reverse_iterator

    ) base_;

    public:

    vector_set_view(BOOST_DEDUCED_TYPENAME base_::base_type & c) :
        base_(c) {}

    vector_set_view & operator=(const vector_set_view & v)
    {
        this->base() = v.base();
        return *this;
    }

        BOOST_DEDUCED_TYPENAME base_::const_reference
        operator[](BOOST_DEDUCED_TYPENAME base_::size_type n) const
    {
        return this->template functor<BOOST_DEDUCED_TYPENAME base_::value_from_base>()(
            this->base().operator[](n)
        );
    }

    BOOST_DEDUCED_TYPENAME base_::const_reference
        at(BOOST_DEDUCED_TYPENAME base_::size_type n) const
    {
        return this->template functor<BOOST_DEDUCED_TYPENAME base_::value_from_base>()(
            this->base().at(n)
        );
    }

    BOOST_DEDUCED_TYPENAME base_::reference
        operator[](BOOST_DEDUCED_TYPENAME base_::size_type n)
    {
        return this->template functor<BOOST_DEDUCED_TYPENAME base_::value_from_base>()(
            const_cast<BOOST_DEDUCED_TYPENAME base_::base_type::value_type &>(
                this->base().operator[](n)
        ));
    }

    BOOST_DEDUCED_TYPENAME base_::reference
        at(BOOST_DEDUCED_TYPENAME base_::size_type n)
    {
        return this->template functor<BOOST_DEDUCED_TYPENAME base_::value_from_base>()(
            const_cast<BOOST_DEDUCED_TYPENAME base_::base_type::value_type &>(
                this->base().at(n)
        ));
    }
    
    BOOST_BIMAP_VIEW_ASSIGN_IMPLEMENTATION(base_)

    BOOST_BIMAP_VIEW_FRONT_BACK_IMPLEMENTATION(base_)

    // List operations

    void splice(BOOST_DEDUCED_TYPENAME base_::iterator position, 
                vector_set_view & x)
    {
        this->base().splice(
            this->template functor<
                BOOST_DEDUCED_TYPENAME base_::iterator_to_base>()(position),
            x.base()
        );
    }

    void splice(BOOST_DEDUCED_TYPENAME base_::iterator position,
                vector_set_view & x,
                BOOST_DEDUCED_TYPENAME base_::iterator i)
    {
        this->base().splice(
            this->template functor<
                BOOST_DEDUCED_TYPENAME base_::iterator_to_base>()(position),
            x.base(),
            this->template functor<
                BOOST_DEDUCED_TYPENAME base_::iterator_to_base>()(i)
        );
    }

    void splice(BOOST_DEDUCED_TYPENAME base_::iterator position, 
                vector_set_view & x,
                BOOST_DEDUCED_TYPENAME base_::iterator first, 
                BOOST_DEDUCED_TYPENAME base_::iterator last)
    {
        this->base().splice(
            this->template functor<
                BOOST_DEDUCED_TYPENAME base_::iterator_to_base>()(position),
            x.base(),
            this->template functor<
                BOOST_DEDUCED_TYPENAME base_::iterator_to_base>()(first),
            this->template functor<
                BOOST_DEDUCED_TYPENAME base_::iterator_to_base>()(last)
        );
    }

    void remove(BOOST_DEDUCED_TYPENAME ::boost::call_traits<
                    BOOST_DEDUCED_TYPENAME base_::value_type >::param_type value)
    {
        this->base().remove(
            this->template functor<
                BOOST_DEDUCED_TYPENAME base_::value_to_base>()(value)
        );
    }

    template<typename Predicate>
    void remove_if(Predicate pred)
    {
        this->base().remove_if(
            ::boost::bimaps::container_adaptor::detail::unary_check_adaptor
            <
                Predicate,
                BOOST_DEDUCED_TYPENAME base_::base_type::value_type,
                BOOST_DEDUCED_TYPENAME base_::value_from_base

            >( pred, this->template functor<
                            BOOST_DEDUCED_TYPENAME base_::value_from_base>() )
        );
    }

    void unique()
    {
        this->base().unique(
            ::boost::bimaps::container_adaptor::detail::comparison_adaptor
            <
                std::equal_to<BOOST_DEDUCED_TYPENAME base_::value_type>,
                BOOST_DEDUCED_TYPENAME base_::base_type::value_type,
                BOOST_DEDUCED_TYPENAME base_::value_from_base

            >(
                std::equal_to<BOOST_DEDUCED_TYPENAME base_::value_type>(),
                this->template functor<
                    BOOST_DEDUCED_TYPENAME base_::value_from_base>()
            )
        );
    }

    template< class BinaryPredicate >
    void unique(BinaryPredicate binary_pred)
    {
        this->base().unique(
            ::boost::bimaps::container_adaptor::detail::comparison_adaptor
            <
                BinaryPredicate,
                BOOST_DEDUCED_TYPENAME base_::base_type::value_type,
                BOOST_DEDUCED_TYPENAME base_::value_from_base

            >( binary_pred,
               this->template functor<
                    BOOST_DEDUCED_TYPENAME base_::value_from_base>() 
            )
        );
    }

    void merge(vector_set_view & x)
    {
        this->base().merge(x.base(),
            ::boost::bimaps::container_adaptor::detail::comparison_adaptor
            <
                std::less<BOOST_DEDUCED_TYPENAME base_::value_type>,
                BOOST_DEDUCED_TYPENAME base_::base_type::value_type,
                BOOST_DEDUCED_TYPENAME base_::value_from_base

            >(
                std::less<BOOST_DEDUCED_TYPENAME base_::value_type>(),
                this->template functor<
                        BOOST_DEDUCED_TYPENAME base_::value_from_base>()
            )
        );
    }

    template< class Compare >
    void merge(vector_set_view & x, Compare comp)
    {
        this->base().merge(x.base(),
            ::boost::bimaps::container_adaptor::detail::comparison_adaptor
            <
                Compare,
                BOOST_DEDUCED_TYPENAME base_::base_type::value_type,
                BOOST_DEDUCED_TYPENAME base_::value_from_base

            >( comp, this->template functor<
                        BOOST_DEDUCED_TYPENAME base_::value_from_base>() )
        );
    }

    void sort()
    {
        this->base().sort(
            ::boost::bimaps::container_adaptor::detail::comparison_adaptor
            <
                std::less<BOOST_DEDUCED_TYPENAME base_::value_type>,
                BOOST_DEDUCED_TYPENAME base_::base_type::value_type,
                BOOST_DEDUCED_TYPENAME base_::value_from_base

            >(
                std::less<BOOST_DEDUCED_TYPENAME base_::value_type>(),
                this->template functor<
                    BOOST_DEDUCED_TYPENAME base_::value_from_base>()
            )
        );
    }

    template< class Compare >
    void sort(Compare comp)
    {
        this->base().sort(
            ::boost::bimaps::container_adaptor::detail::comparison_adaptor
            <
                Compare,
                BOOST_DEDUCED_TYPENAME base_::base_